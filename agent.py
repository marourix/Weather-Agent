import asyncio
from typing import Optional
from agents import Agent, Runner, ModelSettings, OpenAIChatCompletionsModel, AsyncOpenAI
from agents import set_tracing_disabled

from tools.current_weather import get_current_weather
from tools.forecast import get_weather_forecast, get_hourly_forecast
from tools.alerts import get_weather_alerts
from tools.location_resolver import resolve_location
from tools.clothing_advice import suggest_weather_clothing

# D√©sactiver le tra√ßage pour plus de performance
set_tracing_disabled(True)

# Configuration du mod√®le
model = OpenAIChatCompletionsModel(
    model="llama3.2",
    openai_client=AsyncOpenAI(
        base_url="http://localhost:11434/v1",
        api_key="nokeyneeded"
    )
)

AGENT_INSTRUCTIONS = """
Tu es un assistant m√©t√©o fran√ßais. Tu dois r√©pondre √† toutes les requ√™tes m√©t√©o des utilisateurs de mani√®re naturelle et utile.

OUTILS DISPONIBLES :

1. M√âT√âO ACTUELLE
- Outil : get_current_weather
- Param√®tres :
  - location : nom de la ville
  - units : 'celsius'
- Format de r√©ponse : "[ville] maintenant : [temp√©rature]¬∞C, [condition], vent [vitesse]m/s, humidit√© [%], visibilit√© [km]"

2. PR√âVISIONS M√âT√âO
- Outil : get_weather_forecast
- Param√®tres :
  - location : nom de la ville
  - days : nombre de jours (entre 1 et 7)
  - units : 'celsius'
- Format : "[ville], pr√©visions sur [X] jours :
  * [jour de la semaine] : [min]-[max]¬∞C, [condition], risque de pluie : [%]"
- Important : Utiliser les vrais jours de la semaine (lundi, mardi, etc.) en fonction de la date actuelle

3. PR√âVISIONS HORAIRES
- Outil : get_hourly_forecast
- Param√®tres :
  - location : nom de la ville
  - hours : nombre d'heures (entre 12 et 48)
  - units : 'celsius'
- Format : "[ville], pr√©visions horaires :
  * [heure]h : [temp√©rature]¬∞C, [condition]"

4. ALERTES M√âT√âO
- Outil : get_weather_alerts
- Param√®tres :
  - location : nom de la ville
- Format : "[ville] : [type d'alerte] - [description] (niveau : [severity])"
  ou "Aucune alerte m√©t√©o active pour [ville]"

5. LOCALISATION
- Outil : resolve_location
- Param√®tres :
  - location_query : nom du lieu
- Format : "[lieu] : coordonn√©es [latitude], [longitude]"

6. CONSEILS VESTIMENTAIRES
- Outil : suggest_weather_clothing
- Param√®tres :
  - current_weather : donn√©es m√©t√©o actuelles (OBLIGATOIRE)
  - activity : activit√© sp√©cifique (OPTIONNEL)
- Format : "[ville] ([temp√©rature]¬∞C) :
  Recommandations vestimentaires :
  - [conseil 1]
  - [conseil 2]"

R√àGLES IMPORTANTES :
1. Comprendre l'intention de la question avant de choisir l'outil
2. Toujours utiliser les unit√©s m√©triques (¬∞C)
3. Pour les questions sur le parapluie :
   - Utiliser get_weather_forecast pour voir le risque de pluie
   - R√©pondre clairement si un parapluie est n√©cessaire ou non
4. Pour les questions sur les v√™tements :
   - D'abord appeler get_current_weather
   - Puis utiliser suggest_weather_clothing
5. Ne jamais inventer de donn√©es m√©t√©o
6. R√©pondre de mani√®re naturelle et utile
7. Ne jamais afficher les d√©tails techniques ou les noms des outils
8. Toujours v√©rifier la validit√© de la ville avant de r√©pondre
9. Pour les alertes, v√©rifier d'abord si la ville existe
10. Si aucune alerte n'est trouv√©e, r√©pondre "Aucune alerte m√©t√©o active pour [ville]"
11. Pour les pr√©visions horaires, toujours indiquer l'heure locale
12. Pour les pr√©visions journali√®res, indiquer les temp√©ratures min/max
13. Pour les pr√©visions, toujours utiliser les vrais jours de la semaine en fonction de la date actuelle

TRADUCTIONS CONDITIONS M√âT√âO :
- clear sky ‚Üí d√©gag√©
- few clouds ‚Üí peu nuageux
- scattered clouds ‚Üí partiellement nuageux
- broken clouds ‚Üí nuageux
- shower rain ‚Üí averses
- rain ‚Üí pluie
- thunderstorm ‚Üí orage
- snow ‚Üí neige
- mist ‚Üí brumeux

MESSAGES D'ERREUR :
- "‚ùå Ville non trouv√©e"
- "‚ùå Donn√©es m√©t√©o indisponibles"
- "‚ùå Service indisponible"
"""


# Cr√©ation de l'agent
agent = Agent(
    name="Assistant M√©t√©o",
    instructions=AGENT_INSTRUCTIONS,
    tools=[
        get_current_weather,
        get_weather_forecast,
        get_hourly_forecast,
        get_weather_alerts,
        resolve_location,
        suggest_weather_clothing
    ],
    model=model
)

async def stream_response(user_input: str):
    """G√®re le streaming des r√©ponses de l'agent.
    
    Args:
        user_input: Question de l'utilisateur
    """
    try:
        # Extraire la ville de la question
        city = user_input.split('√†')[-1].strip().replace('?', '').strip()
        
        # Laisser l'agent d√©cider quel outil utiliser en fonction de la question
        result = Runner.run_streamed(agent, user_input)
        
        # Afficher la r√©ponse
        async for event in result.stream_events():
            if event.type == "raw_response_event" and hasattr(event.data, 'delta'):
                content = event.data.delta
                if not content.strip().startswith("{") and not content.strip().endswith("}"):
                    print(content, end="", flush=True)
        
        print("\n")
                
    except Exception as e:
        print(f"‚ùå Une erreur est survenue : {str(e)}")
        print("Veuillez r√©essayer avec une autre question.")

if __name__ == "__main__":
    print("Assistant M√©t√©o ‚Äî tapez 'exit' pour quitter.\n")
    
    while True:
        try:
            user_input = input("Posez votre question m√©t√©o : ").strip()
            
            if not user_input:
                continue
                
            if user_input.lower() in ["exit", "quit", "q"]:
                print("√Ä bient√¥t ! üëã")
                break
                
            asyncio.run(stream_response(user_input))
            
            
        except KeyboardInterrupt:
            print("\n√Ä bient√¥t ! üëã")
            break
        except Exception as e:
            print(f"‚ùå Une erreur est survenue : {str(e)}")