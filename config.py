import os
from typing import Dict, Optional
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration API
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY', '')
OPENWEATHER_BASE_URL = 'http://api.openweathermap.org/data/2.5'
OPENWEATHER_GEO_URL = 'http://api.openweathermap.org/geo/1.0'

# Timeouts et limites
REQUEST_TIMEOUT = 10  # secondes
MAX_RETRIES = 3
CACHE_DURATION = 300  # 5 minutes

# Unit√©s et formats
UNITS_CONFIG: Dict[str, Dict[str, str]] = {
    'celsius': {
        'api': 'metric',
        'temp': '¬∞C',
        'speed': 'km/h',
        'speed_multiplier': 3.6
    },
    'fahrenheit': {
        'api': 'imperial',
        'temp': '¬∞F',
        'speed': 'mph',
        'speed_multiplier': 1
    }
}

DEFAULT_UNITS = 'celsius'
DEFAULT_LANGUAGE = 'fr'

# Messages d'erreur
ERROR_MESSAGES = {
    'no_api_key': ("‚ö†Ô∏è La cl√© API OpenWeather n'est pas configur√©e!\n"
                   "1. Cr√©ez un compte sur https://openweathermap.org/api\n"
                   "2. Obtenez votre cl√© API\n"
                   "3. Ajoutez la ligne: OPENWEATHER_API_KEY=votre_cl√©_api"),
    'invalid_api_key': "‚ö†Ô∏è Cl√© API OpenWeather invalide. Veuillez v√©rifier votre configuration.",
    'city_not_found': "‚ùå Ville non trouv√©e : {}",
    'connection_error': "üîå Erreur de connexion. V√©rifiez votre connexion internet.",
    'timeout_error': "‚è±Ô∏è D√©lai d'attente d√©pass√©. Veuillez r√©essayer.",
    'api_error': "‚ùå Erreur API ({}) pour {}"
}

# Emojis pour les conditions m√©t√©o
WEATHER_EMOJIS: Dict[str, str] = {
    'thunderstorm': '‚õàÔ∏è',  # 200-299
    'drizzle': 'üåßÔ∏è',      # 300-399
    'rain': 'üåßÔ∏è',         # 500-599
    'snow': 'üå®Ô∏è',         # 600-699
    'mist': 'üå´Ô∏è',         # 700-799
    'clear': '‚òÄÔ∏è',         # 800
    'clouds': '‚òÅÔ∏è'         # 801-899
}

def get_weather_emoji(weather_id: int) -> str:
    """Retourne l'emoji appropri√© pour un code m√©t√©o donn√©."""
    if 200 <= weather_id < 300:
        return WEATHER_EMOJIS['thunderstorm']
    elif 300 <= weather_id < 400:
        return WEATHER_EMOJIS['drizzle']
    elif 400 <= weather_id < 600:
        return WEATHER_EMOJIS['rain']
    elif 600 <= weather_id < 700:
        return WEATHER_EMOJIS['snow']
    elif 700 <= weather_id < 800:
        return WEATHER_EMOJIS['mist']
    elif weather_id == 800:
        return WEATHER_EMOJIS['clear']
    else:
        return WEATHER_EMOJIS['clouds']

def get_units_config(units: Optional[str] = None) -> Dict[str, str]:
    """Retourne la configuration des unit√©s."""
    return UNITS_CONFIG.get(units or DEFAULT_UNITS, UNITS_CONFIG[DEFAULT_UNITS])
